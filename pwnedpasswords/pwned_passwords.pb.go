// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pwned_passwords.proto

package pwnedpasswords

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListRequest struct {
	HashPrefix           string   `protobuf:"bytes,1,opt,name=hashPrefix,proto3" json:"hashPrefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645ba4fd1df226f8, []int{0}
}

func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetHashPrefix() string {
	if m != nil {
		return m.HashPrefix
	}
	return ""
}

type PasswordHash struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasswordHash) Reset()         { *m = PasswordHash{} }
func (m *PasswordHash) String() string { return proto.CompactTextString(m) }
func (*PasswordHash) ProtoMessage()    {}
func (*PasswordHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_645ba4fd1df226f8, []int{1}
}

func (m *PasswordHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordHash.Unmarshal(m, b)
}
func (m *PasswordHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordHash.Marshal(b, m, deterministic)
}
func (m *PasswordHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordHash.Merge(m, src)
}
func (m *PasswordHash) XXX_Size() int {
	return xxx_messageInfo_PasswordHash.Size(m)
}
func (m *PasswordHash) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordHash.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordHash proto.InternalMessageInfo

func (m *PasswordHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*ListRequest)(nil), "pwnedpasswords.ListRequest")
	proto.RegisterType((*PasswordHash)(nil), "pwnedpasswords.PasswordHash")
}

func init() { proto.RegisterFile("pwned_passwords.proto", fileDescriptor_645ba4fd1df226f8) }

var fileDescriptor_645ba4fd1df226f8 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xcf, 0x4b,
	0x4d, 0x89, 0x2f, 0x48, 0x2c, 0x2e, 0x2e, 0xcf, 0x2f, 0x4a, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x03, 0x0b, 0xc3, 0x45, 0xa5, 0x64, 0xd2, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5,
	0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0xa0, 0xaa,
	0x95, 0x74, 0xb9, 0xb8, 0x7d, 0x32, 0x8b, 0x4b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0xe4, 0xb8, 0xb8, 0x32, 0x12, 0x8b, 0x33, 0x02, 0x8a, 0x52, 0xd3, 0x32, 0x2b, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0x90, 0x44, 0x94, 0x94, 0xb8, 0x78, 0x02, 0xa0, 0x26, 0x7b, 0x24, 0x16,
	0x67, 0x08, 0x09, 0x71, 0xb1, 0x80, 0x64, 0xc1, 0x2a, 0x79, 0x82, 0xc0, 0x6c, 0xa3, 0x2e, 0x46,
	0x2e, 0xbe, 0x00, 0x90, 0x1b, 0x60, 0x2a, 0x8b, 0x85, 0x2a, 0xb8, 0x84, 0x41, 0xb6, 0x80, 0xb4,
	0xa4, 0x16, 0xbb, 0xe5, 0x17, 0x41, 0x4c, 0x13, 0x92, 0xd6, 0x43, 0x75, 0xab, 0x1e, 0x92, 0x53,
	0xa4, 0x64, 0xd0, 0x25, 0x91, 0x2d, 0x56, 0x52, 0x69, 0xba, 0xfc, 0x64, 0x32, 0x93, 0x9c, 0x90,
	0x8c, 0x7e, 0x99, 0xa1, 0x7e, 0x06, 0xd8, 0x5c, 0xfd, 0x6a, 0x84, 0x43, 0x6b, 0xf5, 0x73, 0x32,
	0x8b, 0x4b, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0xde, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x7f,
	0x32, 0x31, 0xee, 0x2d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PwnedPasswordsClient is the client API for PwnedPasswords service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PwnedPasswordsClient interface {
	ListHashesForPrefix(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (PwnedPasswords_ListHashesForPrefixClient, error)
}

type pwnedPasswordsClient struct {
	cc *grpc.ClientConn
}

func NewPwnedPasswordsClient(cc *grpc.ClientConn) PwnedPasswordsClient {
	return &pwnedPasswordsClient{cc}
}

func (c *pwnedPasswordsClient) ListHashesForPrefix(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (PwnedPasswords_ListHashesForPrefixClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PwnedPasswords_serviceDesc.Streams[0], "/pwnedpasswords.PwnedPasswords/ListHashesForPrefix", opts...)
	if err != nil {
		return nil, err
	}
	x := &pwnedPasswordsListHashesForPrefixClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PwnedPasswords_ListHashesForPrefixClient interface {
	Recv() (*PasswordHash, error)
	grpc.ClientStream
}

type pwnedPasswordsListHashesForPrefixClient struct {
	grpc.ClientStream
}

func (x *pwnedPasswordsListHashesForPrefixClient) Recv() (*PasswordHash, error) {
	m := new(PasswordHash)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PwnedPasswordsServer is the server API for PwnedPasswords service.
type PwnedPasswordsServer interface {
	ListHashesForPrefix(*ListRequest, PwnedPasswords_ListHashesForPrefixServer) error
}

// UnimplementedPwnedPasswordsServer can be embedded to have forward compatible implementations.
type UnimplementedPwnedPasswordsServer struct {
}

func (*UnimplementedPwnedPasswordsServer) ListHashesForPrefix(req *ListRequest, srv PwnedPasswords_ListHashesForPrefixServer) error {
	return status.Errorf(codes.Unimplemented, "method ListHashesForPrefix not implemented")
}

func RegisterPwnedPasswordsServer(s *grpc.Server, srv PwnedPasswordsServer) {
	s.RegisterService(&_PwnedPasswords_serviceDesc, srv)
}

func _PwnedPasswords_ListHashesForPrefix_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PwnedPasswordsServer).ListHashesForPrefix(m, &pwnedPasswordsListHashesForPrefixServer{stream})
}

type PwnedPasswords_ListHashesForPrefixServer interface {
	Send(*PasswordHash) error
	grpc.ServerStream
}

type pwnedPasswordsListHashesForPrefixServer struct {
	grpc.ServerStream
}

func (x *pwnedPasswordsListHashesForPrefixServer) Send(m *PasswordHash) error {
	return x.ServerStream.SendMsg(m)
}

var _PwnedPasswords_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pwnedpasswords.PwnedPasswords",
	HandlerType: (*PwnedPasswordsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListHashesForPrefix",
			Handler:       _PwnedPasswords_ListHashesForPrefix_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pwned_passwords.proto",
}
